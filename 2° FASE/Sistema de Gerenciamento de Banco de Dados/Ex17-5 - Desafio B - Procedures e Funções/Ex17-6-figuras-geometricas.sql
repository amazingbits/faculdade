DROP DATABASE IF EXISTS DBFIGURAGEOMETRICA;

CREATE DATABASE DBFIGURAGEOMETRICA;

USE DBFIGURAGEOMETRICA;

CREATE TABLE FIGURA (
	IDFIGURA INT NOT NULL PRIMARY KEY AUTO_INCREMENT
);

CREATE TABLE PROPRIEDADE (
	IDPROPRIEDADE INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, IDFIGURA INT NOT NULL
	, TAMANHO NUMERIC(8,2)
	, TIPO ENUM("RAIO", "ARESTA", "ALTURA", "BASE")
	, FOREIGN KEY (IDFIGURA) REFERENCES FIGURA (IDFIGURA)
);

-- CADASTRANDO FIGURAS
INSERT INTO FIGURA VALUES (NULL);
INSERT INTO FIGURA VALUES (NULL);
INSERT INTO FIGURA VALUES (NULL);
INSERT INTO FIGURA VALUES (NULL);
INSERT INTO FIGURA VALUES (NULL);
INSERT INTO FIGURA VALUES (NULL);
INSERT INTO FIGURA VALUES (NULL);

-- PROPRIEDADES--
-- FIGURA 1 - ELIPSE
/* RAIO FIGURA 1 */ INSERT INTO PROPRIEDADE VALUES (NULL, 1, 50, "RAIO");

-- FIGURA 2 - RETÂNGULO
/* BASE FIGURA 2 (RETANGULO) */ INSERT INTO PROPRIEDADE VALUES (NULL, 2, 5.8, "BASE");
/* ARESTA FIGURA 2 (RETANGULO) */INSERT INTO PROPRIEDADE VALUES (NULL, 2, 8, "ALTURA");

-- FIGURA 3 - CUBO
/* ARESTA FIGURA 3 (CUBO) */INSERT INTO PROPRIEDADE VALUES (NULL, 3, 5, "ARESTA");

-- FIGURA 4 - TRIÂNGULO EQUILÁTERO
/* ARESTA FIGURA 4 (TRIÂNGULO) */ INSERT INTO PROPRIEDADE VALUES (NULL, 4, 7, "ARESTA");
/* ALTURA FIGURA 4 (TRIÂNGULO) */ INSERT INTO PROPRIEDADE VALUES (NULL, 4, 7, "ALTURA");
/* BASE FIGURA 4 (TRIÂNGULO) */ INSERT INTO PROPRIEDADE VALUES (NULL, 4, 7, "BASE");

-- FIGURA 5 - TRIÂNGULO ISÓSCELES
/* ARESTA FIGURA 5 */ INSERT INTO PROPRIEDADE VALUES (NULL, 5, 8, "ARESTA");
/* ARESTA FIGURA 5 */ INSERT INTO PROPRIEDADE VALUES (NULL, 5, 9, "ALTURA");
/* ARESTA FIGURA 5 */ INSERT INTO PROPRIEDADE VALUES (NULL, 5, 8, "BASE");

-- FIGURA 6 - TRIÂNGULO ESCALENO
/* ARESTA FIGURA 6 */ INSERT INTO PROPRIEDADE VALUES (NULL, 6, 10, "ARESTA");
/* ARESTA FIGURA 6 */ INSERT INTO PROPRIEDADE VALUES (NULL, 6, 9, "ALTURA");
/* ARESTA FIGURA 6 */ INSERT INTO PROPRIEDADE VALUES (NULL, 6, 8, "BASE");

-- FIGURA 7 - TRAPÉZIO
/* ARESTA FIGURA 7 */ INSERT INTO PROPRIEDADE VALUES (NULL, 7, 8, "ARESTA");
/* ARESTA FIGURA 7 */ INSERT INTO PROPRIEDADE VALUES (NULL, 7, 9, "ALTURA");
/* ARESTA FIGURA 7 */ INSERT INTO PROPRIEDADE VALUES (NULL, 7, 10, "BASE");

DELIMITER $$

	-- FUNÇÃO PARA DETERMINAR QUAL FIGURA É
    CREATE FUNCTION FN_FIGURA(vIDFIGURA INT) RETURNS TEXT
    BEGIN
		
        -- DECLARAÇÃO DE VARIÁVEIS
        DECLARE ARESTA NUMERIC(8,2);
        DECLARE ALTURA NUMERIC(8,2);
        DECLARE BASE NUMERIC(8,2);
        DECLARE RAIO NUMERIC(8,2);
        DECLARE FIGURA TEXT;
        
        -- SELECIONANDO CADA LADO DA FIGURA, SE TIVER
        SELECT TAMANHO INTO ARESTA FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "ARESTA";
        SELECT TAMANHO INTO ALTURA FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "ALTURA";
        SELECT TAMANHO INTO BASE FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "BASE";
        SELECT TAMANHO INTO RAIO FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "RAIO";
        
        -- PARA SER UMA ELIPSE, BASTA TER UM RAIO CADASTRADO
        IF(RAIO IS NOT NULL) THEN
			SET FIGURA = "ELIPSE";
            RETURN FIGURA;
        END IF;
        
        -- PARA SER UM CUBO, BASTA TER UMA ARESTA
        IF((ARESTA IS NOT NULL) AND (ALTURA IS NULL) AND (BASE IS NULL) AND (RAIO IS NULL)) THEN
			SET FIGURA = "CUBO";
            RETURN FIGURA;
        END IF;
        
        -- PARA SER UM RETÂNGULO, PRECISA TER BASE E ALTURA, E PRECISAM SER DIFERENTES
        IF	(
				RAIO IS NULL
                AND ARESTA IS NULL
				AND BASE IS NOT NULL
                AND ALTURA IS NOT NULL
                AND (BASE <> ALTURA)
			) THEN
            SET FIGURA = "RETÂNGULO";
            RETURN FIGURA;
		END IF;
        
        -- PARA SER UM TRIÂNGULO EQUILÁTERO, PRECISA TER ARESTA, BASE E ALTURA E ELES PRECISAM SER IGUAIS
        IF	(
				RAIO IS NULL 
				AND ARESTA IS NOT NULL
                AND ALTURA IS NOT NULL
                AND BASE IS NOT NULL
                AND (ARESTA = ALTURA)
                AND (ARESTA = BASE)
                AND (ALTURA = BASE)
			) THEN
            SET FIGURA = "TRIÂNGULO EQUILÁTERO";
            RETURN FIGURA;
		END IF;
        
        -- PARA SER UM TRIÂNGULO ISÓSCELES, É NECESSÁRIO TER ARESTA, BASE E ALTURA E DOIS DELES PRECISAM SER IGUAIS
        IF	(
				RAIO IS NULL
				AND ARESTA IS NOT NULL
                AND ALTURA IS NOT NULL
                AND BASE IS NOT NULL
                AND (
						ARESTA = ALTURA
                        OR ARESTA = BASE
                        OR ALTURA = BASE
					)
			) THEN
			SET FIGURA = "TRIÂNGULO ISÓSCELES";
            RETURN FIGURA;
		END IF;
        
        -- PARA SER UM TRIÂNGULO ESCALENO, É NECESSÁRIO TER ARESTA, BASE E ALTURA E OS TRÊS PRECISAM SER DIFERENTES
        IF 	(
				RAIO IS NULL
				AND ARESTA IS NOT NULL
                AND ALTURA IS NOT NULL
                AND BASE IS NOT NULL
                AND (
						ARESTA <> ALTURA
                        AND ARESTA <> BASE
                        AND ALTURA <> BASE
                        AND BASE <= ARESTA
					)
			) THEN
            SET FIGURA = "TRIÂNGULO ESCALENO";
            RETURN FIGURA;
		END IF;
        
        -- PARA SER UM TRAPÉZIO A LÓGICA SE ASSEMELHA AO TRIÂNGULO ESCALENO. COLOQUEI ALGO PRA DIFERENCIAR UM DO OUTRO, QUE É 
        -- TER A BASE MAIOR QUE A ARESTA
        IF	(
				RAIO IS NULL
				AND ARESTA IS NOT NULL
                AND ALTURA IS NOT NULL
                AND BASE IS NOT NULL
                AND (
						ARESTA <> ALTURA
                        AND ARESTA <> BASE
                        AND ALTURA <> BASE
                        AND BASE > ARESTA
					)
			) THEN
            SET FIGURA = "TRAPÉZIO";
            RETURN FIGURA;
		END IF;
        
        -- SE NADA DELES PASSAR, RETORNA FIGURA INVÁLIDA
        SET FIGURA = "FIGURA INVÁLIDA";
        RETURN FIGURA;
        
    END $$
    
    -- FUNÇÃO PARA RETORNAR A ÁREA DA FIGURA INFORMADA
    CREATE FUNCTION FN_AREA(vIDFIGURA INT) RETURNS NUMERIC(8,2)
    BEGIN 
        -- DECLARAÇÃO DE VARIÁVEIS
        DECLARE ARESTA NUMERIC(8,2);
        DECLARE ALTURA NUMERIC(8,2);
        DECLARE BASE NUMERIC(8,2);
        DECLARE RAIO NUMERIC(8,2);
        DECLARE AREA NUMERIC(8,2);
        DECLARE FIGURA TEXT;
        
        -- SELECIONANDO CADA LADO DA FIGURA, SE TIVER
        SELECT TAMANHO INTO ARESTA FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "ARESTA";
        SELECT TAMANHO INTO ALTURA FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "ALTURA";
        SELECT TAMANHO INTO BASE FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "BASE";
        SELECT TAMANHO INTO RAIO FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = "RAIO";
        
        SET FIGURA = FN_FIGURA(vIDFIGURA);
        
        IF(FIGURA = "ELIPSE") THEN
			SET AREA = 3.14 * (RAIO * RAIO);
            RETURN AREA;
        END IF;
        
        IF(FIGURA = "CUBO") THEN
			SET AREA = ARESTA * ARESTA;
            RETURN AREA;
        END IF;
        
        IF(FIGURA = "RETÂNGULO") THEN
			SET AREA = BASE * ALTURA;
            RETURN AREA;
        END IF;
        
        IF((FIGURA = "TRIÂNGULO EQUILÁTERO") OR (FIGURA = "TRIÂNGULO ISÓSCELES") OR (FIGURA = "TRIÂNGULO ESCALENO")) THEN
			SET AREA = (BASE * ALTURA) / 2;
            RETURN AREA;
        END IF;
        
        IF(FIGURA = "TRAPÉZIO") THEN
			SET AREA = ((ARESTA + BASE) / 2) * ALTURA;
            RETURN AREA;
        END IF;
        
        -- SE HOUVER QUALQUER TIPO DE ERRO, ELE RETORNA ZERO
        IF(FIGURA = "FIGURA INVÁLIDA") THEN
			SET FIGURA = 0;
            RETURN FIGURA;
        END IF;
        
    END $$

	-- PROCEDURE PARA CADASTRAR UMA NOVA FIGURA
    CREATE PROCEDURE PC_NOVA_FIGURA()
    BEGIN
        INSERT INTO FIGURA VALUES (NULL);
    END $$
    
    -- PROCEDURE PARA DELETAR UMA FIGURA
    CREATE PROCEDURE PC_DELETAR_FIGURA(IN vIDFIGURA INT)
    BEGIN 
		DELETE FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA;
        DELETE FROM FIGURA WHERE IDFIGURA = vIDFIGURA;
    END $$
    
    -- PROCEDURE PARA ADICIONAR UMA PROPRIEDADE A UMA FIGURA
    CREATE PROCEDURE PC_NOVA_PROPRIEDADE(IN vIDFIGURA INT, IN vTAMANHO NUMERIC(8,2), IN vTIPO TEXT)
    BEGIN
		-- DECLARAÇÃO DE VARIÁVEIS
        DECLARE vPROPRIEDADE INT;
        
        SELECT IDPROPRIEDADE INTO vPROPRIEDADE FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = vTIPO;
        
        IF(vPROPRIEDADE IS NOT NULL) THEN
			UPDATE PROPRIEDADE SET TAMANHO = vTAMANHO WHERE IDPROPRIEDADE = vPROPRIEDADE;
		ELSE 
			INSERT INTO PROPRIEDADE VALUES (NULL, vIDFIGURA, vTAMANHO, vTIPO);
        END IF;
    END $$
    
    -- PROCEDURE PARA DELETAR UMA PROPRIEDADE DE UMA FIGURA
    CREATE PROCEDURE PC_DELETAR_PROPRIEDADE(IN vIDFIGURA INT, IN vTIPO TEXT)
    BEGIN
		-- DECLARAÇÃO DE VARIÁVEIS
		DECLARE vPROPRIEDADE INT;
        
        SELECT IDPROPRIEDADE INTO vPROPRIEDADE FROM PROPRIEDADE WHERE IDFIGURA = vIDFIGURA AND TIPO = vTIPO;
        
        IF(vPROPRIEDADE IS NOT NULL) THEN
			DELETE FROM PROPRIEDADE WHERE IDPROPRIEDADE = vPROPRIEDADE;
        END IF;
    END $$

DELIMITER ;

-- VIEW PARA SELECIONAR A FIGURAS CADASTRADAS
CREATE VIEW VW_FIGURA AS
SELECT 	FN_FIGURA(FIGURA.IDFIGURA) AS FIGURA,
		FN_AREA(FIGURA.IDFIGURA) AS AREA
FROM FIGURA
INNER JOIN PROPRIEDADE ON
(FIGURA.IDFIGURA = PROPRIEDADE.IDPROPRIEDADE);

SELECT FIGURA, AREA FROM VW_FIGURA;